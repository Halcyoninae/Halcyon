const -> A source file that defines constants, can have mutable (final class) or immutable (interface, final class); shall never define functionality

use -> General purpose utility classes and defines specific routines and structures and defines functionality or static/constant functionality

gui -> General independent GUI components that can be invoked.

dgui -> dependent gui that relies on being added to a "gui" prefixed source to make things work

ansi -> Classes that relates to ANSI styles

sys -> Low level system APIs and functionalities, usually accompanied with JNI or some other non Java/JVM components

evnt -> Define listeners and event listeners for anything

impl -> Generic Functional Interfaces or identifier interfaces

No prefix -> A representative class, usually defines a "main(String ... args)". If located in "test" then all files will not have prefixes

HalcyonLang -> Used for language defining resource property files

Excluded Files with meaning behind "No Prefix":
pstream -> By standard should have the "use" prefix, but would become very tedious to type everytime in order to log something.

